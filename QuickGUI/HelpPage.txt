Operators::
+-Addition (a+b)
--Subtraction (a-b)
*/×-Multiplication (a*b)
//÷-Division (a/b)
^-Power (aᵇ)
√-Root (ath root of b)
!-Factorial (let a=5. a! = 1*2*3*4*5)
=-Equals (if a = b: 1, else: -1)
≠-Not Equal To (if a = b: -1, else: 1)
>-Greater than (if a > b: 1, else: -1)
<-Greater than (if a < b: 1, else: -1)
≈-Approximatly equal to
%-Convert to percentage (a/100)
E-E-notation (a * 10^E)
(-Opening bracket (a*(b+b) -> a*2b)
)-Closing bracket (a*(b+b) -> a*2b)
°-Degrees (converts the input into radians)

Functions::
*sin(n)-The sine function
*sinh(n)-The hyperbolic sine function
*asin(n)-The inverse sine function
*cos(n)-The cosine function
*cosh(n)-The hyperbolic cosine function
*acos(n)-The inverse cosine function
*tan(n)-The tangent function
*tanh(n)-The hyperbolic tan function
*atan(n)-The inverse tan function
*csc(n)-The cosecant function (1/sin)
*csch(n)-The hyperbolic cosecant function (1/sinh)
*acsc(n)-The inverse cosecant function (1/asin)
*sec(n)-The secant function (1/cos)
*sech(n)-The hyperbolic secant function (1/cosh)
*asec(n)-The inverse secant function (1/acos)
*cot(n)-The cotangent function (1/tan)
*coth(n)-The hyperbolic cotangent function (1/tanh)
*acot(n)-The inverse cotangent function (1/atan)

rand(a,b)-A random number between A & B
log(a,base)-Logarithm of a number (a^b = c) so (log(c,a) = a)
ln(n)-Natural log (log(a, e)) where e = 2.71...
Γ(n)-Gamma function
total(any)-The sum of all numbers
min(any)-The smallest of all numbers
max(any)-The biggest of all numbers
mean(any)-The Mean of all numbers (total / length)
len(any)-The amount of parameters
real(n)-The real part of the input
imaginary(n)-The imaginary part of the input
hcf(any)-The highest common factor of all elements
gcd(any)-The greatest common divisor of all elements (same as hcf)
lcm(any)-The lowest common multiple of all elements
mod(a, b)-The modulus of a number (remainder of the division)
sign(n)-Returns 1 if it's positive, -1 if negative, and 0 if neither (0)
magnitude(n)-The length of the complex number from 0
phase(n)-The rotation of the complex number from 0
nPr(n,p)-(n!) / (n-r)!
nCr(n,r)-n! / ((n – r)! r!) n
abs(n)-The absolute value of the number (forced to be positive)
set(name,val)-Assigns a variable to a value
convert(type, number, from, to)-Converts between a given metric
Σ(varName, start, length, equation)-Sigma notation (sumnation). Σ("a", 1, 10, "a") would be 1+2+3+4+5+6+7+8+9+10=55
product(varName,start,len,equation)-Pi (product) notation. Π("a", 1, 10, "a") would be 1*2*3*4*5*6*7*8*9*10=3628800
prime(number)-returns -1 if the number isn't a prime, and 1 if it is
divisors(number)-returns the amount of factors of that number
recur(number, digit, ?length)-Makes the number recurring. recur(5, 2) would be 5.22222222222222222222222
leapyear(year)-Is the year a leap year?
dayssince(year, month, day)-Days since the specified time
fraction(number)-Converts a decimal point into a fraction (0.3 => 3/10)
isNaN(number)-If the number is nan, it's a 1, else it's a -1
isInf(number)-If the number is infinity, it's a 1, else it's a -1
if(bool, number1, number2)-If the bool is above 0, it's number1. else number2. note that both number1 and number2 get solved but only one is returned
concat(a, b)-Puts the strings together. example: concat(a,b,c) = abc
*bool(x)-Turns the "x" variable into a bool. If it's positive then it's 1, else -1
*not(x)-Logical-not of X. If it's positive then it's -1, else 1
*or(a,b)-if a or b is true, it's a 1. else -1
*and(a,b)-if a and b are true, it's a 1. else -1
*xor(a,b)-if a or b is true, and they aren't both true, it's a 1. else -1
*nand(a,b)-opposite of "and"
*xnor(a,b)-opposite of "xor"
*nor(a,b)-opposite of "or"